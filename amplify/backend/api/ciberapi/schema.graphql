# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = {allow: public}
} # FOR TESTING ONLY!
type User @model {
  id: ID!
  username: String!
  fullName: String @default(value: "")
  email: String!
  ppURI: String
    @default(
      value: "https://www.pngall.com/wp-content/uploads/5/User-Profile-PNG.png"
    )
  posts: [Post] @hasMany(indexName: "byUser", fields: ["id"])
  #v1# posts: [Post] @connection(keyName: "byUser", fields: ["id"])
  location: String @default(value: "")
  job: String @default(value: "")
  bio: String @default(value: "Let other creators know more about you.")
  skills: String @default(value: "Skill#1 Skill#2 Skill#3 ...")
  #to add into User, these 4 :-
  dirName: String @default(value: "")
  dirLink: String @default(value: "")
  ssName: String @default(value: "")
  ssLink: String @default(value: "")
  #socials: [Socials] @hasMany(indexName: "byUser", fields: ["id"])
  #projects: [Project] @hasMany(indexName: "byUser", fields: ["id"])
}

type Post @model {
  #@key(name: "byUser", fields: ["userID"])
  #v1# @key(name:"byUser",fields:["userID"])
  id: ID!
  status: Boolean!
  videoURI: String!
  desc: String!
  userID: ID! @index(name: "byUser")
  user: User @belongsTo(fields: ["userID"])
  #v1# userID: ID!
  #v1# user: User @connection(fields:["userID"])
  likes: Int @default(value: "0")
  comment: Int @default(value: "0")
  pings: [Ping] @hasMany(indexName: "byPost", fields: ["id"])
  comments: [Comment] @hasMany(indexName: "byPost", fields: ["id"])
  #v1# comments: [Comment] @connection(keyName:"byPost",fields:["id"])
  #categories: [Category] @manyToMany(relationName: "PostCategories")
}

#v1# type Comment @model
#v1# @key(name:"byPost",fields:["postID","content"])
type Comment @model {
  id: ID!
  content: String!
  senderusername: String!
  postID: ID! @index(name: "byPost")
  post: Post @belongsTo(fields: ["postID"])
  #v1#  postID: ID!
  #v1# post: Post @connection(fields:["postID"])
}

#type Category @model {
#  id: ID!
#  label: String!
#  posts: [Post] @manyToMany(relationName: "PostCategories")
#}

type Ping @model {
  #goes to postID's userID
  id: ID!
  pingerID: ID!
  pingMessage: String!
  toID: ID!
  postID: ID! @index(name: "byPost", sortKeyFields: ["pingerID"])
  post: Post @belongsTo(fields: ["postID"])
}

#terminate this Socials for now
#type Socials @model {
#  id: ID!
#  social: String!
#  link: String!
# userID: ID! @index(name: "byUser", sortKeyFields: ["social"])
# user: User @belongsTo(fields: ["userID"])
#}

#terminate this Project for now
#type Project @model {
# id: ID!
# name: String!
#  desc: String!
#  link: String!
#  userID: ID! @index(name: "byUser", sortKeyFields: ["name"])
#  user: User @belongsTo(fields: ["userID"])
#  tags: [Tag] @manyToMany(relationName: "ProjectTags")
#}

#terminate this Tag bc of Project termination
#type Tag @model {
#  id: ID!
#  label: String!
# projects: [Project] @manyToMany(relationName: "ProjectTags")
#}
